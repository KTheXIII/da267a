/**
 * @file   main.c
 * @author Pratchaya Khansomboon (pratchaya.k.git@gmail.com)
 * @brief  Using ESP32 DAC
 * @date   2021-09-27
 *
 * @copyright Copyright (c) 2021
 */
#include <stdint.h>
#include <array>

#include "esp_task_wdt.h"
#include "driver/dac.h"
#include "soc/dac_channel.h"
#include "esp32/rom/ets_sys.h"

extern "C" auto app_main() -> void;

constexpr auto MY_PI = 3.14;
constexpr auto MAX_TIME = 3033UL;
constexpr double SINE_TABLE[] = {
0,
0.0246374,
0.0492599,
0.0738525,
0.0984003,
0.122888,
0.147302,
0.171626,
0.195845,
0.219946,
0.243914,
0.267733,
0.29139,
0.31487,
0.338158,
0.361242,
0.384106,
0.406737,
0.429121,
0.451244,
0.473094,
0.494656,
0.515918,
0.536867,
0.557489,
0.577774,
0.597707,
0.617278,
0.636474,
0.655284,
0.673696,
0.691698,
0.709281,
0.726434,
0.743145,
0.759405,
0.775204,
0.790532,
0.805381,
0.81974,
0.833602,
0.846958,
0.8598,
0.87212,
0.88391,
0.895163,
0.905873,
0.916034,
0.925638,
0.93468,
0.943154,
0.951057,
0.958381,
0.965124,
0.971281,
0.976848,
0.981823,
0.986201,
0.98998,
0.993159,
0.995734,
0.997705,
0.99907,
0.999829,
0.999981,
0.999526,
0.998464,
0.996795,
0.994522,
0.991645,
0.988165,
0.984086,
0.97941,
0.974139,
0.968276,
0.961826,
0.954791,
0.947177,
0.938988,
0.930229,
0.920906,
0.911023,
0.900587,
0.889604,
0.878081,
0.866025,
0.853444,
0.840344,
0.826734,
0.812622,
0.798017,
0.782928,
0.767363,
0.751332,
0.734845,
0.717912,
0.700543,
0.682749,
0.66454,
0.645928,
0.626924,
0.607539,
0.587785,
0.567675,
0.54722,
0.526432,
0.505325,
0.483911,
0.462204,
0.440216,
0.41796,
0.395451,
0.372702,
0.349727,
0.326539,
0.303153,
0.279583,
0.255843,
0.231948,
0.207912,
0.18375,
0.159476,
0.135105,
0.110653,
0.0861329,
0.0615609,
0.0369515,
0.0123197,
-0.0123197,
-0.0369515,
-0.0615609,
-0.0861329,
-0.110653,
-0.135105,
-0.159476,
-0.18375,
-0.207912,
-0.231948,
-0.255843,
-0.279583,
-0.303153,
-0.326539,
-0.349727,
-0.372702,
-0.395451,
-0.41796,
-0.440216,
-0.462204,
-0.483911,
-0.505325,
-0.526432,
-0.54722,
-0.567675,
-0.587785,
-0.607539,
-0.626924,
-0.645928,
-0.66454,
-0.682749,
-0.700543,
-0.717912,
-0.734845,
-0.751332,
-0.767363,
-0.782928,
-0.798017,
-0.812622,
-0.826734,
-0.840344,
-0.853444,
-0.866025,
-0.878081,
-0.889604,
-0.900587,
-0.911023,
-0.920906,
-0.930229,
-0.938988,
-0.947177,
-0.954791,
-0.961826,
-0.968276,
-0.974139,
-0.97941,
-0.984086,
-0.988165,
-0.991645,
-0.994522,
-0.996795,
-0.998464,
-0.999526,
-0.999981,
-0.999829,
-0.99907,
-0.997705,
-0.995734,
-0.993159,
-0.98998,
-0.986201,
-0.981823,
-0.976848,
-0.971281,
-0.965124,
-0.958381,
-0.951057,
-0.943154,
-0.93468,
-0.925638,
-0.916034,
-0.905873,
-0.895163,
-0.88391,
-0.87212,
-0.8598,
-0.846958,
-0.833602,
-0.81974,
-0.805381,
-0.790532,
-0.775204,
-0.759405,
-0.743145,
-0.726434,
-0.709281,
-0.691698,
-0.673696,
-0.655284,
-0.636474,
-0.617278,
-0.597707,
-0.577774,
-0.557489,
-0.536867,
-0.515918,
-0.494656,
-0.473094,
-0.451244,
-0.429121,
-0.406737,
-0.384106,
-0.361242,
-0.338158,
-0.31487,
-0.29139,
-0.267733,
-0.243914,
-0.219946,
-0.195845,
-0.171626,
-0.147302,
-0.122888,
-0.0984003,
-0.0738525,
-0.0492599,
-0.0246374,
};

void timer_callback(void *args) {
    uint8_t index = 0;
    auto start    = esp_timer_get_time();
    auto current  = start;
    auto last     = start;
    while(current - start < MAX_TIME) {
        current = esp_timer_get_time();
        if (current - last > MAX_TIME / 255) {
            dac_output_voltage(DAC_GPIO26_CHANNEL, uint8_t(SINE_TABLE[index] * 255.));
            last = current;
        }
    }
}

auto app_main() -> void {
    dac_output_enable(DAC_GPIO26_CHANNEL);

    esp_timer_create_args_t config;
    config.name     = "wave_timer";
    config.arg      = nullptr;
    config.callback = timer_callback;

    esp_timer_handle_t timer;
    esp_err_t res = esp_timer_create(&config, &timer);
    ESP_ERROR_CHECK(res);

    res = esp_timer_start_periodic(timer, MAX_TIME);
    ESP_ERROR_CHECK(res);
}

